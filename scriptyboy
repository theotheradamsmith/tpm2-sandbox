#!/usr/bin/env bash

shopt -s extglob globstar

app:io:puts() {
    [[ "$1" == -- ]] && shift
    local IFS=' '
    printf '%s\n' "$*"
}

#app:create_ek() {
    #echo "Generating EK..."
    #tpm2_createek -c ek.ctx
    #tpm2_readpublic -c ek.ctx -o ek.pub > ek.yaml
    #cat ek.yaml | grep '^name:' | awk '{ print $2 }' > ek.name
#}

#app:create_srk() {
    #echo "Generating SRK..."
    #tpm2_startauthsession --policy-session -S session.ctx
    #tpm2_policysecret -S session.ctx -c 0x4000000B
    #tpm2_create \
        #-C ek.ctx \
        #-P "session:session.ctx" \
        #-G rsa2048 \
        #-u srk.pub \
        #-r srk.priv \
        #-a 'restricted|decrypt|fixedtpm|fixedparent|sensitivedataorigin|userwithauth'
    #tpm2_flushcontext session.ctx
    #tpm2_startauthsession --policy-session -S session.ctx
    #tpm2_policysecret -S session.ctx -c 0x4000000B
    #tpm2_load -C ek.ctx -P "session:session.ctx" -u srk.pub -r srk.priv -c srk.ctx
    #tpm2_flushcontext session.ctx
    #tpm2_evictcontrol -C o -c srk.ctx 0x81010002
    #tpm2_readpublic -c srk.ctx > srk.yaml
    #cat srk.yaml | grep '^name:' | awk '{ print $2 }' > srk.name
#}

app:activate_credential() {
    echo "Activating CA credential..."
    tpm2_startauthsession --policy-session -S session.ctx
    tpm2_policysecret -S session.ctx -c e
    tpm2_activatecredential \
        -c ak.ctx \
        -C ek.ctx \
        -i mkcred.out \
        -o actcred.out \
        -P"session:session.ctx" > verify.out
    # Terminate the auth session
    tpm2_flushcontext session.ctx
}

app:ca_challenge() {
    # The CA needs:
    #  1) The EK public key to encrypt the challenge to (or, better, the EK cert to extract the key from to use?)
    #  2) The AK public key blob, which includes content such as the key attributes
    #  3) The AK name, which is a hash of the public key blob

    # Get manufacturer CA certs
    wget -O - -q https://www.infineon.com/dgdl/Infineon-TPM_RSA_Root_CA-C-v01_00-EN.cer?fileId=5546d46253f6505701540496a5641d20 \
        | openssl x509 -out Infineon-RSA-Root.pem
    wget -O - -q https://pki.infineon.com/OptigaRsaMfrCA036/OptigaRsaMfrCA036.crt \
        | openssl x509 -out Infineon-RSA-Int.pem

    # Confirm validity of the user's EK cert
    openssl verify \
        -verbose \
        -CAfile <( cat Infineon-RSA-Root.pem Infineon-RSA-Int.pem ) \
        RSA_EK_cert.bin

    # Extract public key from user's EK cert
    openssl x509 -inform der -in RSA_EK_cert.bin -pubkey -noout > RSA_EK_pub.pem

    # Use the public key from the user's EK cert to prepare the challenge
    echo "Aren't cats just the best?" > secret.data
    ak_name_file_size=`stat --printf="%s" ak.name`
    loaded_ak_name=`cat ak.name | xxd -p -c $ak_name_file_size`
    tpm2_makecredential \
        -Q \
        --tcti none \
        -G rsa \
        -u RSA_EK_pub.pem \
        -s secret.data \
        -n $loaded_ak_name \
        -o mkcred.out
}

app:ca_verify_appk() {
    # This verification requires:
    #   1) the AK public key in PEM format
    #   2) the AppK attestation signature
    #   3) The AppK attestation binary
    echo "Verifying Appk..."
    # tpm2_verifysignature -c ak.ctx -g sha256 -m appk.attestation -s appk.attestation.sig -f ecdsa
    # tpm2_checkquote -u ak.pub.pem -m appk.attestation -s appk.attestation.sig
    openssl dgst \
        -verify ak.pub.pem \
        -keyform PEM \
        -sha256 \
        -signature appk.attestation.sig \
        -binary appk.attestation
}

app:certify_appk() {
    echo "Certifying Appk..."
    tpm2_certifycreation \
        -C ak.ctx \
        -c appk.ctx \
        -d appk.creation.dig \
        -t appk.creation.ticket \
        -g sha256 \
        -o appk.attestation.sig \
        --attestation appk.attestation \
        -f plain \
        -s ecdsa
}

app:clean() {
    #tpm2_evictcontrol -C o -c 0x81010002
    # Remove the peristent handle for the SRK
    tpm2_evictcontrol -C o -c srk.handle
}

app:create_ak() {
    echo "Generating AK..."
    tpm2_create \
        -C srk.handle \
        -g sha256 \
        -G ecc256:ecdsa:null \
        -a 'fixedtpm|fixedparent|sensitivedataorigin|userwithauth|restricted|sign' \
        -u ak.pub \
        -r ak.priv \
        --format=pem \
        --output=ak.pub.pem
    tpm2_load \
        -C srk.handle \
        -u ak.pub \
        -r ak.priv \
        -c ak.ctx \
        -n ak.name
}

app:create_appk() {
    echo "Generating AppK..."
    # The App Key is the same as our AK, but without the restricted flag
    # We will also need to store the creation hash and creation ticket for
    # certification
    tpm2_create \
        -C srk.handle \
        -g sha256 \
        -G ecc256:ecdsa:null \
        -a 'fixedtpm|fixedparent|sensitivedataorigin|userwithauth|sign' \
        -u appk.pub \
        -r appk.priv \
        -t appk.creation.ticket \
        -d appk.creation.dig \
        --creation-data appk.creation.dat \
        --format=pem \
        --output=appk.pub.pem
    tpm2_load \
        -C srk.handle \
        -u appk.pub \
        -r appk.priv \
        -c appk.ctx \
        -n appk.name
    app:certify_appk
}

app:create_ek() {
    echo "Generating EK..."
    tpm2_createek \
        -G rsa \
        -c ek.ctx \
        -u ek.pub
    # Save the EK certificates for use later
    tpm2_getekcertificate -o RSA_EK_cert.bin -o ECC_EK_cert.bin
}

app:create_srk() {
    echo "Generating SRK..."
    app:gen_unique
    tpm2_createprimary \
        -C o \
        -G rsa2048:aes128cfb \
        -g sha256 \
        -c srk.ctx \
        -a 'fixedtpm|fixedparent|sensitivedataorigin|userwithauth|noda|restricted|decrypt' \
        -u unique.dat \
        --format=pem \
        --output=srk.pub.pem
    # Make the key persistent and store the handle for use as parent context
    # for child objects
    tpm2_evictcontrol -C o -c srk.ctx -o srk.handle
}

app:credential_activation() {
    app:ca_challenge
    app:activate_credential
    diff -q secret.data actcred.out >/dev/null && echo "EK is legitimate" || echo "Bad EK"
}

app:decrypt_nonce() {
    echo "Decrypting nonce..."
    tpm2_startauthsession --policy-session -S session.ctx
    tpm2_policysecret -S session.ctx -c 0x4000000B
    tpm2_activatecredential -c 0x81010002 -C ek.ctx -i nonce.encrypted -o nonce.decrypted -P "session:session.ctx"
    tpm2_flushcontext session.ctx
}

app:gen_nonce() {
    echo "Creating nonce and encrypting..."
    openssl rand -hex 6 > nonce.plain
    tpm2_makecredential -T none -e ek.pub -s nonce.plain -n $(cat srk.name) -o nonce.encrypted
}

app:gen_unique() {
    cat <( printf '\x00\x01' ) \
        <( dd if=/dev/zero bs=254 count=1 2>/dev/null ) \
        > unique.dat
}

app:help() {
    app:io:puts "
        --all: execute the full monty
        --clean: evict control of all objects
        --create-appk: create an application key
    "
}

app::main() {
    local args vrb=0

    args="$(
        getopt \
        -n "${BASH_ARGV0##*/}" \
        -o hqvV \
        -l all \
        -l clean \
        -l create-appk \
        -- "$@"
    )" || return 1

    eval set -- "$args"

    while (( $# )); do
        case "$1" in
            -h|--help) app:help; return 0 ;;
            -V|--version) app:io:puts version; return 0 ;;
            -q|--quiet) : @todo; shift ;;
            -v|--verbose) : vrb=1; shift ;;
            --all) shift; break ;;
            --clean) app:clean; return 0 ;;
            --create-appk) app:create_appk; return 0 ;;
            --) shift; break ;;
            *) app:io:puts "Unhandled option" ;;
        esac
    done

    app:create_ek
    app:create_srk
    app:create_ak
    app:create_appk
    app:credential_activation
    app:ca_verify_appk

    #app:gen_nonce
    #app:decrypt_nonce
    #app:clean

    return 0
}

app::main "$@"
